package com.sist.ab;
/*
 * 	1. 클래스 종류
 * 		= 일반클래스 (핵심)
 * 			형식) 
 * 				public class className{
 * 				  멤버변수, 공유변수
 * 				  생성자
 * 				  메소드	
 * 				}
 * 				1) 데이터형으로만 사용
 * 					=> 필요한 데이터를 모아서 관리 (캡슐화) => 데이터를 은닉화, 메소드를 통해 접근
 * 															   ===============  ==================
 * 																private			  getter / setter
 * 				2) 액션 => 기능만 가지고 있다 (=메소드)
 * 				3) 변수+메소드 = 혼합
 * 	   ==================			
 * 		= 추상클래스
 * 			public abstract class className{
 * 			  멤버변수 / 공유변수 
 * 			  구현이 안된 메소드 => 미완성된 클래스
			  구현이 된 메소드
 * 			}
 * 			1. 자신이 메모리 할당을 할 수 없음
 * 			2. 생성 => 상속받은 클래스를 통해서 메모리 저장
 * 			3. 단일 상속만 가능
 * 			4. 상속을 받은 클래스는 반드시 구현이 안된 메소드를 구현하여 사용해야 한다
 * 			5. 여러개 클래스가 있는 경우 => 공통으로 적용되는 메소드가 있는 경우에 추상클래스를 제작
 * 			6. 구분 => 메모리 할당시 => 클래스 선언 = 생성자
 * 
 * 				A a = new A => 일반클래스
 * 				A a = new B => 추상클래스 (자신이 메모리 할당을 할 수 없다)
 * 
 *			7. 메소드 구현이 애매한 경우  (경우의 수가 많다)
 *				예) 먹는다()
 *					개,소,돼지,말
 *				예) 버튼 클릭()
 *			8. 기본 틀이 제작 => 구현이 쉽다
 *			9. 요구사항 분석
 * 
 * 		= 인터페이스 : 웹프로그램
 * 			1. 추상클래스의 일종 (기능 동일)
 * 			2. 다중상속이 가능
 * 			3. 형식
 * 				public interface interfaceName{}
 * 				 변수 : 상수형 ★ ==> public final static 데이터형=값
 * 									  ===================
 * 									 생략시에는 자동 추가 (private, protected 사용금지)
 * 				 메소드 : 구현이 안된 메소드만 가지고 있다
 * 				 *** JDK 1.8 이상 => default => 구현된 메소드 작성
 * 			4. 인터페이스도 클래스이다 (상위 클래스의 개념을 지님) => 상속을 내려야만 사용이 가능
 * 				* 인터페이스는 클래스로부터 상속받을 수 없다
 * 				* 인터페이스 => 인터페이스 => extends
 * 				* 인터페이스 => 클래스 => implements
 *				
 *					interface A
 *					class B
 *					class C extends B implements A
 *			
 *					interface A
 *					interface B
 *					class implements A,B
 *
 * 			=> 여러개의 관련없는 클래스를 연결해서 사용하는 프로그램
 * 			=> 결합성 ~ (다른 클래스에 미치는 영향) 이 낮은 프로그램을 만들경우에 주로 사용(스프링)
 * 			   스프링 ==> 인터페이스 기반	
 * 	   ================== 관련된 클래스가 여러개 => 묶어서 사용(통합)
 * 							= 데이터베이스 연결
 * 							= 웹프로그램 (MVC)
 * 		= 내부클래스 : 애플리케이션
 * 			= 멤버클래스 : 두개 이상의 클래스에서 한개의 데이터 공유할 경우 (클래스안의 클래스)
 * 
 * 			class A{
 * 				O, K, X
 * 				class B{}
 *          }
 * 						   네트워크 프로그램, 쓰레드 프로그램, 빅데이터 에서 많이 사용
 * 			= 익명의 클래스 : 상속받지않고 오버라이딩 (윈도우)
 * 			class A
 * 			{
 * 			}
 */
public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
